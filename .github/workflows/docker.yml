name: üê≥ Docker CI/CD

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  pull_request_target:
    paths:
      - "app/**"
      - "public/**"
      - "test/**"
      - ".dockerignore"
      - "auth.ts"
      - "bun.lock"
      - "Dockerfile"
      - "middleware.ts"
      - "package.json"
      - "*config.*"
  push:
    branches: main
    paths:
      - "app/**"
      - "public/**"
      - "test/**"
      - ".dockerignore"
      - "auth.ts"
      - "bun.lock"
      - "Dockerfile"
      - "middleware.ts"
      - "package.json"
      - "*config.*"
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      no-cache:
        description: "Build docker images with no cache"
        default: false
        required: false
        type: boolean
      push:
        description: 'Push docker image to registry'
        default: false
        required: false
        type: boolean

permissions:
  attestations: write
  contents: read
  id-token: write
  packages: write
  pull-requests: write

env:
  DOCKERHUB_USERNAME: marukome0743
  REPOSITORY: marukome0743/dcrs
  GHCR_REGISTRY: ghcr.io
  GHCR_REPOSITORY: openup-labtakizawa/dcrs
  SHA: ${{ github.event.pull_request.head.sha || github.sha }}
  IS_PUSH: ${{ github.event_name == 'push' || inputs.push == true }}

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.repository_owner == 'openup-labtakizawa'
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: üì• Checkout
        uses: actions/checkout@v5
        with:
          persist-credentials: false
          ref: ${{ env.SHA }}

      - name: üêã Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: üö¢ Login to GitHub Container Registry
        if: fromJSON(env.IS_PUSH)
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üê¶‚Äç‚¨õ Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: üõ†Ô∏è Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: ‚ÑπÔ∏è Docker Meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            name=${{ env.REPOSITORY }}
            name=${{ env.GHCR_REGISTRY }}/${{ env.GHCR_REPOSITORY }},enable=${{ fromJSON(env.IS_PUSH) }}
          labels: org.opencontainers.image.revision=${{ env.SHA }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}
            type=ref,event=pr,prefix=pr-
            type=raw,value=canary,enable=${{ github.event_name != 'pull_request_target' }}
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: ${{ fromJSON(env.IS_PUSH) && 'manifest,index' || 'manifest' }}

      - name: üöÄ Build and Push
        uses: docker/build-push-action@v6
        id: push
        with:
          annotations: ${{ steps.meta.outputs.annotations }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: .
          labels: ${{ steps.meta.outputs.labels }}
          load: ${{ !fromJSON(env.IS_PUSH) }}
          no-cache: ${{ inputs.no-cache == true }}
          platforms: ${{ fromJSON(env.IS_PUSH) && 'linux/amd64,linux/arm64' || 'linux/amd64' }}
          provenance: ${{ fromJSON(env.IS_PUSH) && 'mode=max' }}
          push: ${{ fromJSON(env.IS_PUSH) }}
          sbom: ${{ fromJSON(env.IS_PUSH) }}
          secrets: database=postgres://postgres:postgres@localhost:5432/postgres
          tags: ${{ steps.meta.outputs.tags }}

      - name: ü™™ Attest
        if: fromJSON(env.IS_PUSH)
        uses: actions/attest-build-provenance@v3
        with:
          subject-name: ${{ env.GHCR_REGISTRY }}/${{ env.GHCR_REPOSITORY }}
          subject-digest: ${{ steps.push.outputs.digest }}

      - name: üîé Docker Scout
        if: github.event_name == 'pull_request_target'
        uses: docker/scout-action@v1
        with:
          command: compare
          image: ${{ steps.meta.outputs.tags }}
          to: ${{ env.REPOSITORY }}:canary
          only-severities: critical,high
